WEEK 8 

EXERCISE 1
--------------------------------------------------------------------------------------------
1.


#include<iostream>
using namespace std;

class A {
private: 
	int a;
public:
	void set_a();
	void get_a();

	friend A operator +(A, A);
	friend A operator -(A, A); 
	friend void operator ==(A, A);
	friend A operator %(A, A);
	friend A operator /(A, A);
	friend void operator <(A, A);
	friend void operator >(A, A);
};

void A::set_a() {
	cin >> a;
}
void A::get_a() {
	cout << a << endl;
}

A operator +(A ob1, A ob2) {
	A tmp;
	tmp.a = ob1.a + ob2.a;
	return tmp;
}
A operator -(A ob1, A ob2) {
	A tmp;
	tmp.a = ob1.a + ob2.a;
	return tmp;
}

void operator ==(A ob1, A ob2) {
	if (ob1.a == ob2.a) {
		cout << "objects are equal";
	}
	else {
		cout << "objects are not equal";
	}
}

A operator %(A ob1, A ob2) {
	A tmp;
	tmp.a = ob1.a % ob2.a;
	return tmp;
}

A operator /(A ob1, A ob2) {
	A tmp;
	tmp.a = ob1.a / ob2.a;
	return tmp;
}

void operator <(A ob1, A ob2) {
	ob1.a < ob2.a ? cout << "YES" : cout << "NO";
}

void operator >(A ob1, A ob2) {
	ob1.a > ob2.a ? cout << "YES" : cout << "NO";
}

int main() {
	A ob1, ob2;
	ob1.set_a();
	ob2.set_a();

	A ob3 = ob1 + ob2;
	ob3.get_a();

	A ob3 = ob1 - ob2;
	ob3.get_a();
	
	A ob3 = ob1 % ob2;
	ob3.get_a();

	A ob3 = ob1 / ob2;
	ob3.get_a();

	ob1 == ob2;
	ob1 < ob2;
	ob1 > ob2;

}
-------------------------------------------------------------------------------------------
2.
#include<iostream>
#include<string.h>
using namespace std;
class test {
private:
	char st[100];
public:
	void read() {

		cout << "enter string: ";
		cin >> st;

	}

	friend void operator >(test, test);

};

void operator >(test t1, test t2) {
	(strlen(t1.st) > strlen(t2.st) ? cout << "YES" : cout << "NO");
}





int main() {
	test t1, t2;
	t1.read();
	t2.read();
	t1 > t2;
	return 0;
	
}
--------------------------------------------------------------------------------------
EXERCISE 2:
1.
#include<iostream>
using namespace std;
class student {
	int id;
public:
	friend void operator >>(istream& in, student& s);
};
void operator >>(istream& in, student& s) {
	in >> s.id;
}
int main() {
	student s;
	cin >> s;
}
-----------------------------------------------------------------------------------------------------
EXERCISE 3:

1.
#include<iostream>
#include<string.h>
#pragma warning(disable: 4996)
using namespace std;
class test {

	char st[100];
public:
	void read() {
		cin >> st;
	}
	void display() {
		cout << st;
	}
	friend test operator +(test, test);
};

test operator+(test t1, test t2) {
	test t3;
	strcpy(t3.st, t1.st);
	strcat(t3.st, t2.st);
	return t3;
}

int main() {
	test t1, t2, t3;
	t1.read();
	t2.read();
	t3 = t1 + t2;
	t3.display();
}
--------------------------------------------------------------------------------------------------------------
2.
#include<iostream>
using namespace std;

class A {
private:
	int a;
public:
	void set_a();
	void get_a();

	
	friend void operator ==(A, A);
	
};

void A::set_a() {
	cin >> a;
}
void A::get_a() {
	cout << a << endl;
}


void operator ==(A ob1, A ob2) {
	if (ob1.a == ob2.a) {
		cout << "objects are equal";
	}
	else {
		cout << "objects are not equal";
	}
}


int main() {
	A ob1, ob2;
	ob1.set_a();
	ob2.set_a();

	
	ob1 == ob2;
	
}
-------------------------------------------------------------------------------------------------------------
WEEK 9 
#include<iostream>
using namespace std;
class area {
protected:
	int width;
	int height;
public:
	void getarea() {
		cin >> width;
		cin >> height;
	}
};

class perimeter {
protected:
	int width1;
	int height1;
public:
	void getperimeter() {
		cin >> width1;
		cin >> height1;
	}
};

class rectangle:public area, public perimeter {
	int Area;
	int Perimeter;
public:
	void show() {
		
		Area = width * height;
		Perimeter = width1 + width1 + height1 + height1;
		cout << Area << endl;
		cout << Perimeter;
	}
};

int main() {
	rectangle obj;
	obj.getarea();
	obj.getperimeter();
	obj.show();

}


1.

#include<iostream>
using namespace std;
class shape {
protected:
	int width = 10;
	int height= 5;
public:
	
};

class rectangle :public shape {
public: 
	void rec() {
		int sq;
		sq = width * height;
		cout << sq << endl;
	}
};

class triangle :public shape {
public:
	void tri() {
		int triangle;
		triangle = width * height / 2;
		cout << triangle;
	}
};

int main() {
	rectangle a;
	triangle b;
	
	a.rec();
	
	b.tri();

}
----------------------------------------------------------------------------------------------------
#include<iostream>
using namespace std;
class Animal {
protected:
	char name;
	int age;
public:
	void getdata() {
		cin >> name;
		cin >> age;
	}
};

class Zebra :public Animal {
public: 
	void message() {
		cout << "this Zebra's name is: " << name << endl;
		cout << "and age is : " << age << endl;
		cout << "It eats grass"<<endl;


	}
};

class Dolphin : public Animal {
public: 
	void mess() {
		cout << "This dolphin's name is: " << name << endl;
		cout << "and age is " << age << endl;
		cout << "It swims well ";
	}
};

int main() {
	Zebra a;
	Dolphin b;
	a.getdata();
	a.message();
	b.getdata();
	b.mess();

}
