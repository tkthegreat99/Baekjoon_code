WEEK 12


1.

#include<iostream>
using namespace std;
template <class t>
t sum(t a, t b) {
	return a + b;
}

int main() {
	cout << sum(10, 20) << endl;
	cout << sum(10.2, 6.1) << endl;

}

2,
#include<iostream>
using namespace std;
template <class T>

void swap(T& n1, T& n2) {
	
	T tmp = n1;
	n1 = n2;
	n2 = tmp;
}

int main() {
	int a=1, b=2;
	double c = 4.5, d = 3.4;

	cout << "Before Swap : ";
	cout << "a = " << a << "b = "<< b;
	cout << "c = " << c << "d = " << d;

	swap(a, b);
	swap(c, d);

	cout << "After Swap : ";
	cout << "a = " << a << "b = " << b;
	cout << "c = " << c << "d = " << d;

	return 0;
}


Week 13&14

1.
#include<iostream>
#include<array>

using namespace std;

int main() {
	float average1, average2;

	array<array<float, 2>,3 >a{ {{20, 100 }, {70, 36}, {30, 50} } };
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 2; j++) {
			cout << a[i][j] << "\t";

		}
		cout << endl;
	}
	average1 = (a[0][0] + a[1][0] + a[2][0]) / 3;
	average2 = (a[1][1] + a[1][1] + a[2][1]) / 3;
	cout << average1 << endl;
	cout << average2;



	return 0;


2.
#include<iostream>
#include<fstream>
#include<stdlib.h>
#define Max_size 1000
char inputString[Max_size];
using namespace std;

int main() {
	char name[100];
	int id;

	ofstream outfile("test.txt");
	try {
		if (!outfile)throw 0;
		else {
			cin >> name;
			cin >> id;
			outfile << name << endl;
			outfile << id;


		}
		
	}
	catch (int x) {
		cout << "Error occurs in file operation ";
		exit(1);
	}
	ifstream infile("test.txt");
	while (!infile.eof()) {
		infile.getline(inputString, 100);
		cout << inputString << endl;

	}
	infile.close();





	return 0;


}







3. #include <iostream>

using namespace std;

int main()
{
	const char* message[] = { "Dynamic memory allocation failed! " };
	enum Error {
		MEMORY
	};

	int* arr, length;
	cout << "Enter length of array: " << endl;
	cin >> length;
	arr = new int[length];
	try {
		
		if (!arr) {
			throw MEMORY;
		}
	}
	catch (Error e) {
		cout << "Error!" << message[e];
	}
	delete[] arr;
}

}

